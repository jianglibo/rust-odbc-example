name: systemd-runner
version: "0.1.0"
about: install, uninstall to systemd.
author: hmkj <jianglibo@gmail.com>

# AppSettings can be defined as a list and are **not** ascii case sensitive
# settings:
#   - ArgRequiredElseHelp

# All Args must be defined in the 'args:' list where the name of the arg, is the
# key to a Hash object
# args:
  # The name of this argument, is 'opt' which will be used to access the value
  # later in your Rust code
  # - opt:
  #     help: example option argument from yaml
  #     short: o
  #     long: option
  #     multiple: true
  #     takes_value: true # is this parameter has corepsonding values?
  # - pos:
  #     help: example positional argument from yaml
  #     index: 1
  #     # A list of possible values can be defined as a list
  #     possible_values:
  #         - generate-bash-completions
  #         - generate-zsh-completions
  # - app-instance-id:
  #     help: The app role if cann't infer from the command line parameters.
  #     long: app-instance-id
  #     required: false
  #     takes_value: true
#   - delay:
#       help: the delay seconds of watcher.
#       short: d
#       long: delay
#       takes_value: true
#       required: false
  # - console-log:
  #     help: enable console log output.
  #     long: console-log
  #     required: false
  # - as-service:
  #     help: put application in long running state.
  #     long: as-service
  #     required: false
  # - enable-sha1:
  #     help: detect file changing on file's sha1.
  #     long: enable-sha1
  #     required: false
  # - v:
  #     help: verbose level debug.
  #     long: v
  #     required: false
  # - vv:
  #     help: verbose level trace.
  #     long: vv
  #     required: false
  # - delay:
  #     help: delay seconds before execute command. for test purpose.
  #     long: delay
  #     takes_value: true
  #     required: false
  # - no-db:
  #     help: don't use db.
  #     long: no-db
  #     required: false
  # - no-pb:
  #     help: don't display progress bar.
  #     long: no-pb
  #     required: false
  # - buf-len:
  #     help: the buf-len in case needed.
  #     long: buf-len
  #     takes_value: true
  #     required: false
  # - flag:
  #     help: demo flag argument
  #     short: F
  #     multiple: true
  #     global: true
  #     https://docs.rs/clap/2.33.0/clap/struct.Arg.html#method.global
  #     # Conflicts, mutual overrides, and requirements can all be defined as a
  #     # list, where the key is the name of the other argument
  #     conflicts_with:
  #         - opt
  #     # requires:
  #     #     - pos
  # - mode:
  #     long: mode
  #     help: shows an option with specific values
  #     # possible_values can also be defined in this list format
  #     possible_values: [ vi, emacs ]
  #     takes_value: true
  # - mvals:
  #     long: mult-vals
  #     help: demos an option which has two named values
  #     # value names can be described in a list, where the help will be shown
  #     # --mult-vals <one> <two>
  #     value_names:
  #         - one
  #         - two
  # - minvals:
  #     long: min-vals
  #     multiple: true
  #     help: you must supply at least two values to satisfy me
  #     min_values: 2
  # - maxvals:
  #     long: max-vals
  #     multiple: true
  #     help: you can only supply a max of 3 values for me!
  #     max_values: 3

# All subcommands must be listed in the 'subcommand:' object, where the key to
# the list is the name of the subcommand, and all settings for that command are
# are part of a Hash object
subcommands:
  # The name of this subcommand will be 'subcmd' which can be accessed in your
  # Rust code later
  # - subcmd:
  #     about: demos subcommands from yaml
  #     version: "0.1"
  #     author: Kevin K. <kbknapp@gmail.com>
  #     # Subcommand args are exactly like App args
  #     args:
  #         - scopt:
  #             short: B
  #             multiple: true
  #             help: example subcommand option
  #             takes_value: true
  #         - scpos1:
  #             help: example subcommand positional
  #             index: 1
  - install:
      about: install or overrides a service.
      args:
        - name:
            help: the name of the service.
            short: n
            long: name
            takes_value: true
            required: true
            index: 1
        - template:
            help: the template file.
            short: t
            long: template
            takes_value: true
            required: false
  - uninstall:
      about: unisntall a servcie.
      args:
        - name:
            help: the name of the service.
            short: n
            long: name
            takes_value: true
            required: true
            index: 1
  - test-upload:
      about: test when file uploaded.
      args:
        - file:
            help: the path to file, if is relative it's related to this executable.
            short: f
            long: file
            takes_value: true
            required: true
            index: 1
  - driver-datasource:
      about: list odbc driver and datasource.
  # - polling-file:
  #     about: polling the file properties.
  #     args:
  #         - file:
  #             help: the file name to polling.
  #             required: true
  #             index: 1
  #         - period:
  #             help: the interval of seconds between polling.
  #             required: false
  #             index: 2
  # - create-db:
  #     about: create database.
  #     args:
  #         - server-yml:
  #             help: the configuration file.
  #             long: server-yml
  #             required: false
  #             index: 1
  #         - db-type:
  #             help: what kind of database to create.
  #             long: db-type
  #             possible_values: [ sqlite ]
  #             takes_value: true
  #         - force:
  #             help: remove and create remote database if exists.
  #             long: force
  #             required: false
  # - create-remote-db:
  #     about: create remote database.
  #     args:
  #         - server-yml:
  #             help: the configuration file.
  #             long: server-yml
  #             required: false
  #             index: 1
  #         - db-type:
  #             help: what kind of database to create.
  #             long: db-type
  #             possible_values: [ sqlite ]
  #             takes_value: true
  #         - force:
  #             help: remove and create remote database if exists.
  #             long: force
  #             required: false
  # - copy-executable:
  #     about: copy a executable file to server, the directory to put is described in the server yml file.
  #     args:
  #         - server-yml:
  #             help: the configuration file.
  #             long: server-yml
  #             required: true
  #             index: 1
  #         - executable:
  #             help: the executable file to copy.
  #             required: true
  #             takes_value: true
  # - copy-server-yml:
  #     about: copy a server-yml file to server, the directory to put is described in the server yml file.
  #     args:
  #         - server-yml:
  #             required: true
  #             index: 1
  # - print-report:
  #     about: print out last execution report.
  #     args:
  #         - server-yml:
  #             required: true
  #             index: 1
  # - verify-server-yml:
  #     about: verify if remote executable exists and remote server yml configuration file exists.
  #     args:
  #         - server-yml:
  #             required: true
  #             index: 1
  # - list-server-yml:
  #     about: list server yml in the configurated data dir.
  # - demo-server-yml:
  #     about: print out a demonstrate server-yml as a start point for you editing. you can redirect output to file.
  #     args:
  #         - out:
  #             long: out
  #             required: false
  #             takes_value: true
  # - archive-local:
  #     about: archive directories in the configuration file.
  #     args:
  #         - server-yml:
  #             required: false
  #             index: 1
  #         - prune:
  #             help: archive directories and prune backups.
  #             long: prune
  #             required: false
  #         - prune-only:
  #             help: don't archive directories, but only prune backups.
  #             long: prune-only
  #             required: false
  #             conflicts_with:
  #                 - prune
  # - send-test-mail:
  #     about: send a test mail to verify mail configuration.
  #     args:
  #         - to:
  #             required: true
  #             index: 1
  # - ping:
  #     about: ping a message to server.
  # - pong:
  #     about: reply a message to client.
  # - client-push-loop:
  #     about: client side push loop.
  #     args:
  #         - server-yml:
  #             required: false
  #             index: 1
  #         - rsync-window:
  #             long: rsync-window
  #             takes_value: true
  #             required: false
  #         - archive:
  #             help: archive folder after sync.
  #             long: archive
  #             required: false
  # - client-pull-loop:
  #     about: client side pull loop.
  #     args:
  #         - server-yml:
  #             required: false
  #             index: 1
  #         - rsync-window:
  #             long: rsync-window
  #             takes_value: true
  #             required: false
  #         - archive:
  #             help: archive folder after sync.
  #             long: archive
  #             required: false
  # - server-receive-loop:
  #     about: server side receive loop.
  #     args:
  #         - rsync-window:
  #             long: rsync-window
  #             takes_value: true
  #             required: false
  # - server-send-loop:
  #     about: server side send loop.
  #     args:
  #         - rsync-window:
  #             long: rsync-window
  #             takes_value: true
  #             required: false
  # - rsync:
  #     about: sync relative functions.
  #     subcommands:
  #         - signature:
  #             args:
  #                 - file:
  #                     long: file
  #                     required: true
  #                     takes_value: true
  #                 - block-size:
  #                     long: block-size
  #                     required: false
  #                     takes_value: true
  #                 - out:
  #                     long: out
  #                     required: false
  #                     takes_value: true
  #                 - rsync-window:
  #                     long: rsync-window
  #                     takes_value: true
  #                     required: false
  #         - delta-a-file:
  #             args:
  #                 - new-file:
  #                     long: new-file
  #                     required: true
  #                     takes_value: true
  #                 - sig-file:
  #                     long: sig-file
  #                     required: false
  #                     takes_value: true
  #                 - out-file:
  #                     long: out-file
  #                     required: false
  #                     takes_value: true
  #                 - print-progress:
  #                     long: print-progress
  #                     required: false
  #         - restore-a-file:
  #             args:
  #                 - old-file:
  #                     long: old-file
  #                     required: true
  #                     takes_value: true
  #                 - delta-file:
  #                     long: delta-file
  #                     required: false
  #                     takes_value: true
  #                 - out-file:
  #                     long: out-file
  #                     required: false
  #                     takes_value: true
  - completions:
      about: for example, systemd-runner completions bash > ~/.local/share/bash-completion/completions/systemd-runner
      version: "0.1"
      author: Libo jiang <jianglibo@gmail.com>
      # Subcommand args are exactly like App args
      args:
        - shell_name:
            help: The shell to generate the script for.
            index: 1
            required: true
            possible_values:
              - bash
              - fish
              - zsh
              - powershell
              - elvish
# ArgGroups are supported as well, and must be sepcified in the 'groups:'
# object of this file
# groups:
#     # the name of the ArgGoup is specified here
#     - min-max-vals:
#         # All args and groups that are a part of this group are set here
#         args:
#             - minvals
#             - maxvals
#         # setting conflicts is done the same manner as setting 'args:'
#         #
#         # to make this group required, you could set 'required: true' but for
#         # this example we won't do that.
